{% comment %}
//
// Product Buying Json
//
{% endcomment %}

{% unless product == empty %}
<script type="application/json" id="ProductJson-{{ section.id }}">
	{{ product | json }}
</script>
{% endunless %}

<script>
	// Based on https://gist.github.com/jonathanmoore/c0e0e503aa732bf1c05b7a7be4230c61
	var Shopify = Shopify || {};
	Shopify.arrayIncludes = function(e, t) {
		for (var n = 0; n < e.length; n++)
			if (e[n] == t) return !0;
		return !1
	}, Shopify.uniq = function(e) {
		for (var t = [], n = 0; n < e.length; n++) Shopify.arrayIncludes(t, e[n]) || t.push(e[n]);
		return t
	}
	Shopify.optionsMap = {};
	Shopify.updateOptionsInSelector = function(selectorIndex) {
		switch (selectorIndex) {
			case 0:
				var key = 'root';
				var selector = $('#product-id-{{ section.id }} .single-option-selector:eq(0)');
				break;
			case 1:
				var key = $('#product-id-{{ section.id }} .single-option-selector:eq(0)').val();
				var selector = $('#product-id-{{ section.id }} .single-option-selector:eq(1)');
				break;
			case 2:
				var key = $('#product-id-{{ section.id }} .single-option-selector:eq(0)').val();  
				key += ' / ' + $('#product-id-{{ section.id }} .single-option-selector:eq(1)').val();
				var selector = $('#product-id-{{ section.id }} .single-option-selector:eq(2)');
		}
		var initialValue = selector.val();
		selector.empty();
		var availableOptions = Shopify.optionsMap[key];
		for (var i=0; i<availableOptions.length; i++) {
			var option = availableOptions[i];
			var newOption = $('<option></option>').val(option).html(option);
			selector.append(newOption);
		}
		if ($.inArray(initialValue, availableOptions) !== -1) {
			selector.val(initialValue);
		}
		selector.trigger('change'); 
	};

	Shopify.linkOptionSelectors = function(product) {
		for (var i=0; i<product.variants.length; i++) {
			var variant = product.variants[i];
			if (variant) {
				Shopify.optionsMap['root'] = Shopify.optionsMap['root'] || [];
				Shopify.optionsMap['root'].push(variant.option1);
				Shopify.optionsMap['root'] = Shopify.uniq(Shopify.optionsMap['root']);
				if (product.options.length > 1) {
					var key = variant.option1;
					Shopify.optionsMap[key] = Shopify.optionsMap[key] || [];
					Shopify.optionsMap[key].push(variant.option2);
					Shopify.optionsMap[key] = Shopify.uniq(Shopify.optionsMap[key]);
				}
				if (product.options.length === 3) {
					var key = variant.option1 + ' / ' + variant.option2;
					Shopify.optionsMap[key] = Shopify.optionsMap[key] || [];
					Shopify.optionsMap[key].push(variant.option3);
					Shopify.optionsMap[key] = Shopify.uniq(Shopify.optionsMap[key]);
				}
			}
		}
		Shopify.updateOptionsInSelector(0);
		if (product.options.length > 1) Shopify.updateOptionsInSelector(1);
		if (product.options.length === 3) Shopify.updateOptionsInSelector(2);

		$('#product-id-{{ section.id }} .single-option-selector:eq(0)').change(function() {
			Shopify.updateOptionsInSelector(1);
			if (product.options.length === 3) Shopify.updateOptionsInSelector(2);
			return true;
		});

		$('#product-id-{{ section.id }} .single-option-selector:eq(1)').change(function() {
			if (product.options.length === 3) Shopify.updateOptionsInSelector(2);
			return true;
		});

	};

	{% if product.available and product.options.size > 1 %}
		var $addToCartForm = $('#product-id-{{ section.id }} form[action="/cart/add"]');
		if (window.MutationObserver && $addToCartForm.length) {
			if (typeof observer === 'object' && typeof observer.disconnect === 'function') {
				observer.disconnect();
			}
			var config = { childList: true, subtree: true };
			var observer = new MutationObserver(function() {
				Shopify.linkOptionSelectors({{ product | json }});
				observer.disconnect();
			});
			observer.observe($addToCartForm[0], config);
		}
	{% endif %}

	var selector = $('#product-id-{{ section.id }} .single-option-selector:eq(0)');
	selector.trigger('change');

	{% if product.variants.size > 1 %}
		$(function(){
			var variantImages = {},
				thumbnails,
				variant,
				variantImage,
				opt_key,
				opt_val,
				loop_index;

			{% for variant in product.variants %}
				variant = {{ variant | json }};
				if ( typeof variant.featured_image !== 'undefined' && variant.featured_image !== null ) {
					variantImage = variant.featured_image.src.split('?')[0].replace(/http(s)?:/,'');
					variantImages[variantImage] = variantImages[variantImage] || {};
					{% for option in product.options %}
						{%- assign option_value = variant.options[forloop.index0] -%}
						{%- assign option_key = 'option-' | append: forloop.index0 -%}
						opt_key = {{ option_key | json }};
						opt_val = {{ option_value | json }};
						if (typeof variantImages[variantImage][opt_key] === 'undefined') {
							variantImages[variantImage][opt_key] = opt_val;
						} else {
							var oldValue = variantImages[variantImage][opt_key];
							if ( oldValue !== null && oldValue !== opt_val ) {
								variantImages[variantImage][opt_key] = null;
							}
						}
					{% endfor %}
				}

			{% endfor %}

			$(function(){
				thumbnails = $('#product-id-{{ section.id }} img[src*="/products/"]').not(':first');
				if (thumbnails.length) {
					thumbnails.bind('click', function() {
						var image = $(this).attr('src').split('?')[0].replace(/(_50x)/,'');
						if (typeof variantImages[image] !== 'undefined') {
							{% for option in product.options %}
								loop_index = 'option-{{ forloop.index0 }}';
								if (variantImages[image][loop_index] !== null) {
									$('#product-id-{{ section.id }} .single-option-selector:eq({{ forloop.index0 }})').val(variantImages[image][loop_index]).trigger('change');
								}
							{% endfor %}
						}
					});
				}
			});
		});
	{% endif %}
</script>
